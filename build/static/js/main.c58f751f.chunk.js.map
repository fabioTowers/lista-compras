{"version":3,"sources":["index.js"],"names":["Lista","props","soma","indice","novoValor","setState","state","itens","map","item","pos","total","subTotal","qtd","preco","modificaQtd","novoQtd","deletaItem","produto","subtotal","window","confirm","filter","modificaProduto","novoNome","setProduto","bind","setQtd","adicionarItem","className","type","onChange","this","value","min","onClick","Item","somaPreco","modQtd","del","modProd","e","target","preventDefault","length","newItem","id","Date","now","riscado","concat","React","Component","name","defaultValue","htmlFor","src","alt","height","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c58f751f.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style.css'\r\n\r\n/*\r\nfunction Item (props) {\r\n    const [produto, setProduto] = useState(props.produto)\r\n    const [qtd, setQtd] = useState(props.qtd)\r\n    return <div className=\"umItem\">\r\n        <input type=\"checkbox\" name=\"riscar\" id=\"\"></input>\r\n        <input type=\"text\" value={produto} className=\"campo\" id=\"tfProd\" onChange={e => setProduto(e.target.value)}></input>\r\n        <label for=\"preco\"> R$ </label>\r\n        <input id=\"preco\" type=\"text\" className=\"campo\" id=\"tfPreco\" onChange={e =>{props.somaPreco(+e.target.value)}}></input>\r\n        <label for=\"qtd\">   Qtd. </label>\r\n        <input id=\"qtd\" type=\"number\" min=\"1\" value={qtd} className=\"campo\" id=\"tfQtd\" onChange={e => setQtd(e.target.value)}></input>\r\n        <span> Subtotal R$ </span>\r\n    </div>\r\n}\r\n\r\nclass Lista extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            total: 0.00\r\n        }\r\n    }\r\n    \r\n    soma = (novoValor, valorAntigo) => {\r\n        this.setState({\r\n            total: (this.state.total - valorAntigo) + novoValor\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"lista\">\r\n                <div className=\"divHeaderLista\">{\"Título da lista\"}\r\n                    <br/>\r\n                    Adicionar item <input type=\"text\" className=\"campoHeaderItem\"></input> Qtd. <input type=\"number\" min=\"1\" className=\"campoHeaderQtd\"></input> <button className=\"btnAdicionar\">Adicionar</button>\r\n                </div>\r\n                <div className=\"conteudo\">\r\n                    <Item produto=\"Pão de batata\"\r\n                        qtd=\"3\"\r\n                        somaPreco={this.soma}></Item>\r\n                    <Item produto=\"Sanduiche\"\r\n                        preco=\"5,42\"\r\n                        qtd=\"1\"\r\n                        somaPreco={this.soma}></Item>\r\n                </div>\r\n                <div>Total R$ {this.state.total}</div>\r\n            </div>\r\n        )\r\n    }\r\n}*/\r\n\r\nclass Lista extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { itens: [], produto: '', qtd: 1, total: 0.00};\r\n        this.setProduto = this.setProduto.bind(this);\r\n        this.setQtd =this.setQtd.bind(this);\r\n        this.adicionarItem = this.adicionarItem.bind(this);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"lista\">\r\n                <div className=\"divHeaderLista\">{\"Título da lista\"}\r\n                    <br/>\r\n                    Adicionar item <input type=\"text\" className=\"campoHeaderItem\" onChange={this.setProduto} value={this.state.produto}></input> Qtd. <input type=\"number\" min=\"1\" className=\"campoHeaderQtd\" onChange={this.setQtd} value={this.state.qtd}></input> <button className=\"btnAdicionar\" onClick={this.adicionarItem}>Adicionar</button>\r\n                </div>\r\n                <div className=\"conteudo\">\r\n                    <Item itens={this.state.itens} somaPreco={this.soma} modQtd={this.modificaQtd} del={this.deletaItem} modProd={this.modificaProduto}/>\r\n                </div>\r\n                <div>Total R$ {this.state.total}</div>\r\n            \r\n\r\n          {/*<div>\r\n            <h3>Tarefas</h3>\r\n            <TodoList items={this.state.items} />\r\n            <form onSubmit={this.handleSubmit}>\r\n              <label htmlFor=\"new-todo\">\r\n                O que precisa ser feito?\r\n              </label>\r\n              <input\r\n                id=\"new-todo\"\r\n                onChange={this.handleChange}\r\n                value={this.state.text}\r\n              />\r\n              <button>\r\n                Adicionar #{this.state.items.length + 1}\r\n              </button>\r\n            </form>\r\n          </div>*/}\r\n\r\n            </div>\r\n        );//fim do return\r\n      }//fim do render\r\n\r\n      setProduto(e) {\r\n        this.setState({ produto: e.target.value });\r\n      }\r\n\r\n      setQtd(e){\r\n        this.setState({ qtd: e.target.value });\r\n      }\r\n\r\n      adicionarItem(e) {\r\n        e.preventDefault();\r\n        if (this.state.produto.length === 0) {\r\n          return;\r\n        }\r\n        const newItem = {\r\n          produto: this.state.produto,\r\n          id: Date.now(),\r\n          qtd: this.state.qtd,\r\n          preco: 0.00,\r\n          subTotal: 0.00,\r\n          riscado: false\r\n        };\r\n        this.setState(state => ({\r\n          itens: state.itens.concat(newItem),\r\n          produto: '',\r\n          qtd: 1\r\n        }));\r\n      }//fim do método adicionarItem()\r\n\r\n      soma = (indice, novoValor) => {\r\n        //alert(\"indice: \" + indice + \"; novo valor: \" + novoValor);\r\n\r\n        this.setState( state => {\r\n          const itens = state.itens.map( (item, pos) => {\r\n            if(pos === indice){\r\n              //alert(\"índice: \" + pos + \"; novo valor: \" + novoValor + \"; valor antigo: \" + item.preco);\r\n\r\n              this.state.total = (this.state.total - item.subTotal) + (item.qtd * novoValor);\r\n\r\n              item.subTotal = item.qtd * novoValor;\r\n              item.preco = novoValor;\r\n              return item;\r\n            } else {\r\n              return item;\r\n            }\r\n          });//fim da funçao map\r\n\r\n          return{\r\n            itens,\r\n          };\r\n\r\n        });//fim de setState\r\n\r\n      }//fim da funçao soma\r\n\r\n      modificaQtd = (indice, novoQtd) => {\r\n        this.setState( state => {\r\n          const itens = state.itens.map( (item, pos) => {\r\n            if(pos === indice){\r\n              this.state.total = (this.state.total - item.subTotal) + (item.preco * novoQtd);\r\n              item.subTotal = item.preco * novoQtd;\r\n              item.qtd = novoQtd;\r\n              return item;\r\n            } else {\r\n              return item;\r\n            }\r\n          });//fim de map\r\n\r\n          return{\r\n            itens,\r\n          };\r\n        });//fim do setState\r\n      }\r\n\r\n      deletaItem = (indice, produto, subtotal) => {\r\n        \r\n        if( window.confirm(\"Deseja deletar o item \" + produto + \"?\") ) {\r\n          this.setState(state => {\r\n            const itens = state.itens.filter((item, pos) => indice !== pos);\r\n            this.setState(state => ({\r\n              total: this.state.total - subtotal\r\n            }));\r\n            return {\r\n              itens,\r\n            };\r\n          });\r\n        }\r\n      };\r\n\r\n      modificaProduto = (indice, novoNome) => {\r\n        this.setState( state => {\r\n          const itens = state.itens.map( (item, pos) => {\r\n            if(pos === indice){\r\n              item.produto = novoNome;\r\n              return item;\r\n            } else {\r\n              return item;\r\n            }\r\n          });//fim de map\r\n\r\n          return{\r\n            itens,\r\n          };\r\n        });//fim do setState\r\n      }\r\n\r\n}//fim da classe (component) lista\r\n\r\nfunction Item (props) {\r\n\r\n    return <> {props.itens.map( (item, indice) => (\r\n            <div className=\"umItem\" key={item.id} >\r\n                <input type=\"checkbox\" name=\"riscar\" id=\"\"></input>\r\n                <input type=\"text\" defaultValue={item.produto} className=\"campo\" id=\"tfProd\" onChange={e => {props.modProd(indice, e.target.value)} }></input>\r\n                <label htmlFor=\"preco\"> R$ </label>\r\n                <input type=\"text\" className=\"campo\" id=\"tfPreco\" onChange={e =>{props.somaPreco(indice, +e.target.value)}}></input>\r\n                <label htmlFor=\"qtd\">   Qtd. </label>\r\n                <input type=\"number\" value={item.qtd} min=\"1\" className=\"campo\" id=\"tfQtd\" onChange={e =>{props.modQtd(indice, +e.target.value)}}></input>\r\n                <span> Subtotal R$ </span> {item.subTotal}\r\n                <a onClick={e => {props.del(indice, item.produto, item.subTotal)} }>\r\n                  <img src={\"remove.png\"} alt={\"Remover\"} height={\"20px\"}/>\r\n                </a>\r\n           </div>\r\n           ))}\r\n          </>\r\n}\r\n\r\nReactDOM.render(\r\n    <Lista></Lista>,\r\n    document.getElementById('root')\r\n)"],"sourceRoot":""}