{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fabio Mendes\\\\Documents\\\\lista-compras\\\\src\\\\index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\n/*\r\nfunction Item (props) {\r\n    const [produto, setProduto] = useState(props.produto)\r\n    const [qtd, setQtd] = useState(props.qtd)\r\n    return <div className=\"umItem\">\r\n        <input type=\"checkbox\" name=\"riscar\" id=\"\"></input>\r\n        <input type=\"text\" value={produto} className=\"campo\" id=\"tfProd\" onChange={e => setProduto(e.target.value)}></input>\r\n        <label for=\"preco\"> R$ </label>\r\n        <input id=\"preco\" type=\"text\" className=\"campo\" id=\"tfPreco\" onChange={e =>{props.somaPreco(+e.target.value)}}></input>\r\n        <label for=\"qtd\">   Qtd. </label>\r\n        <input id=\"qtd\" type=\"number\" min=\"1\" value={qtd} className=\"campo\" id=\"tfQtd\" onChange={e => setQtd(e.target.value)}></input>\r\n        <span> Subtotal R$ </span>\r\n    </div>\r\n}\r\n\r\nclass Lista extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            total: 0.00\r\n        }\r\n    }\r\n    \r\n    soma = (novoValor, valorAntigo) => {\r\n        this.setState({\r\n            total: (this.state.total - valorAntigo) + novoValor\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"lista\">\r\n                <div className=\"divHeaderLista\">{\"Título da lista\"}\r\n                    <br/>\r\n                    Adicionar item <input type=\"text\" className=\"campoHeaderItem\"></input> Qtd. <input type=\"number\" min=\"1\" className=\"campoHeaderQtd\"></input> <button className=\"btnAdicionar\">Adicionar</button>\r\n                </div>\r\n                <div className=\"conteudo\">\r\n                    <Item produto=\"Pão de batata\"\r\n                        qtd=\"3\"\r\n                        somaPreco={this.soma}></Item>\r\n                    <Item produto=\"Sanduiche\"\r\n                        preco=\"5,42\"\r\n                        qtd=\"1\"\r\n                        somaPreco={this.soma}></Item>\r\n                </div>\r\n                <div>Total R$ {this.state.total}</div>\r\n            </div>\r\n        )\r\n    }\r\n}*/\n\nclass Lista extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.soma = (indice, novoValor) => {\n      //alert(\"indice: \" + indice + \"; novo valor: \" + novoValor);\n      this.setState(state => {\n        const itens = state.itens.map((item, pos) => {\n          if (pos === indice) {\n            alert(\"índice: \" + pos + \"; novo valor: \" + novoValor + \"; valor antigo: \" + item.preco);\n            /*this.setState({\r\n              total: (this.state.total - item.subtotal) + (novoValor * item.qtd)\r\n            })*/\n\n            total = this.state.total - item.subTotal + item.qtd * novoValor;\n            item.subTotal = item.qtd * novoValor;\n            item.preco = novoValor;\n            return item;\n          } else {\n            return item;\n          }\n        }); //fim da funçao map\n\n        return {\n          itens\n        };\n      }); //fim de setState\n    };\n\n    this.state = {\n      itens: [],\n      produto: '',\n      qtd: 1,\n      total: 0.00\n    };\n    this.setProduto = this.setProduto.bind(this);\n    this.setQtd = this.setQtd.bind(this);\n    this.adicionarItem = this.adicionarItem.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lista\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"divHeaderLista\",\n        children: [\"Título da lista\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), \"Adicionar item \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"campoHeaderItem\",\n          onChange: this.setProduto,\n          value: this.state.produto\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 36\n        }, this), \" Qtd. \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"1\",\n          className: \"campoHeaderQtd\",\n          onChange: this.setQtd,\n          value: this.state.qtd\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 151\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btnAdicionar\",\n          onClick: this.adicionarItem,\n          children: \"Adicionar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 262\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"conteudo\",\n        children: /*#__PURE__*/_jsxDEV(Item, {\n          itens: this.state.itens,\n          somaPreco: this.soma\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Total R$ \", this.state.total]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this); //fim do return\n  } //fim do render\n\n\n  setProduto(e) {\n    this.setState({\n      produto: e.target.value\n    });\n  }\n\n  setQtd(e) {\n    this.setState({\n      qtd: e.target.value\n    });\n  }\n\n  adicionarItem(e) {\n    e.preventDefault();\n\n    if (this.state.produto.length === 0) {\n      return;\n    }\n\n    const newItem = {\n      produto: this.state.produto,\n      id: Date.now(),\n      qtd: this.state.qtd,\n      preco: 0.00,\n      subTotal: 0.00,\n      riscado: false\n    };\n    this.setState(state => ({\n      itens: state.itens.concat(newItem),\n      produto: '',\n      qtd: 1\n    }));\n  } //fim do método adicionarItem()\n  //fim da funçao soma\n\n\n} //fim da classe (component) lista\n\n\nfunction Item(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\" \", props.itens.map((item, indice) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"umItem\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        name: \"riscar\",\n        id: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: item.produto,\n        className: \"campo\",\n        id: \"tfProd\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"preco\",\n        children: \" R$ \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"preco\",\n        type: \"text\",\n        className: \"campo\",\n        id: \"tfPreco\",\n        onChange: e => {\n          props.somaPreco(indice, +e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        for: \"qtd\",\n        children: \"   Qtd. \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"qtd\",\n        type: \"number\",\n        value: item.qtd,\n        min: \"1\",\n        className: \"campo\",\n        id: \"tfQtd\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \" Subtotal R$ \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this), \" \", indice]\n    }, item.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this))]\n  }, void 0, true);\n}\n\n_c = Item;\nReactDOM.render( /*#__PURE__*/_jsxDEV(Lista, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 176,\n  columnNumber: 5\n}, this), document.getElementById('root'));\n\nvar _c;\n\n$RefreshReg$(_c, \"Item\");","map":{"version":3,"sources":["C:/Users/Fabio Mendes/Documents/lista-compras/src/index.js"],"names":["React","useState","ReactDOM","Lista","Component","constructor","props","soma","indice","novoValor","setState","state","itens","map","item","pos","alert","preco","total","subTotal","qtd","produto","setProduto","bind","setQtd","adicionarItem","render","e","target","value","preventDefault","length","newItem","id","Date","now","riscado","concat","Item","somaPreco","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style.css'\r\n\r\n/*\r\nfunction Item (props) {\r\n    const [produto, setProduto] = useState(props.produto)\r\n    const [qtd, setQtd] = useState(props.qtd)\r\n    return <div className=\"umItem\">\r\n        <input type=\"checkbox\" name=\"riscar\" id=\"\"></input>\r\n        <input type=\"text\" value={produto} className=\"campo\" id=\"tfProd\" onChange={e => setProduto(e.target.value)}></input>\r\n        <label for=\"preco\"> R$ </label>\r\n        <input id=\"preco\" type=\"text\" className=\"campo\" id=\"tfPreco\" onChange={e =>{props.somaPreco(+e.target.value)}}></input>\r\n        <label for=\"qtd\">   Qtd. </label>\r\n        <input id=\"qtd\" type=\"number\" min=\"1\" value={qtd} className=\"campo\" id=\"tfQtd\" onChange={e => setQtd(e.target.value)}></input>\r\n        <span> Subtotal R$ </span>\r\n    </div>\r\n}\r\n\r\nclass Lista extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            total: 0.00\r\n        }\r\n    }\r\n    \r\n    soma = (novoValor, valorAntigo) => {\r\n        this.setState({\r\n            total: (this.state.total - valorAntigo) + novoValor\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"lista\">\r\n                <div className=\"divHeaderLista\">{\"Título da lista\"}\r\n                    <br/>\r\n                    Adicionar item <input type=\"text\" className=\"campoHeaderItem\"></input> Qtd. <input type=\"number\" min=\"1\" className=\"campoHeaderQtd\"></input> <button className=\"btnAdicionar\">Adicionar</button>\r\n                </div>\r\n                <div className=\"conteudo\">\r\n                    <Item produto=\"Pão de batata\"\r\n                        qtd=\"3\"\r\n                        somaPreco={this.soma}></Item>\r\n                    <Item produto=\"Sanduiche\"\r\n                        preco=\"5,42\"\r\n                        qtd=\"1\"\r\n                        somaPreco={this.soma}></Item>\r\n                </div>\r\n                <div>Total R$ {this.state.total}</div>\r\n            </div>\r\n        )\r\n    }\r\n}*/\r\n\r\nclass Lista extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { itens: [], produto: '', qtd: 1, total: 0.00};\r\n        this.setProduto = this.setProduto.bind(this);\r\n        this.setQtd =this.setQtd.bind(this);\r\n        this.adicionarItem = this.adicionarItem.bind(this);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"lista\">\r\n                <div className=\"divHeaderLista\">{\"Título da lista\"}\r\n                    <br/>\r\n                    Adicionar item <input type=\"text\" className=\"campoHeaderItem\" onChange={this.setProduto} value={this.state.produto}></input> Qtd. <input type=\"number\" min=\"1\" className=\"campoHeaderQtd\" onChange={this.setQtd} value={this.state.qtd}></input> <button className=\"btnAdicionar\" onClick={this.adicionarItem}>Adicionar</button>\r\n                </div>\r\n                <div className=\"conteudo\">\r\n                    <Item itens={this.state.itens} somaPreco={this.soma}/>\r\n                </div>\r\n                <div>Total R$ {this.state.total}</div>\r\n            \r\n\r\n          {/*<div>\r\n            <h3>Tarefas</h3>\r\n            <TodoList items={this.state.items} />\r\n            <form onSubmit={this.handleSubmit}>\r\n              <label htmlFor=\"new-todo\">\r\n                O que precisa ser feito?\r\n              </label>\r\n              <input\r\n                id=\"new-todo\"\r\n                onChange={this.handleChange}\r\n                value={this.state.text}\r\n              />\r\n              <button>\r\n                Adicionar #{this.state.items.length + 1}\r\n              </button>\r\n            </form>\r\n          </div>*/}\r\n\r\n            </div>\r\n        );//fim do return\r\n      }//fim do render\r\n\r\n      setProduto(e) {\r\n        this.setState({ produto: e.target.value });\r\n      }\r\n\r\n      setQtd(e){\r\n        this.setState({ qtd: e.target.value });\r\n      }\r\n\r\n      adicionarItem(e) {\r\n        e.preventDefault();\r\n        if (this.state.produto.length === 0) {\r\n          return;\r\n        }\r\n        const newItem = {\r\n          produto: this.state.produto,\r\n          id: Date.now(),\r\n          qtd: this.state.qtd,\r\n          preco: 0.00,\r\n          subTotal: 0.00,\r\n          riscado: false\r\n        };\r\n        this.setState(state => ({\r\n          itens: state.itens.concat(newItem),\r\n          produto: '',\r\n          qtd: 1\r\n        }));\r\n      }//fim do método adicionarItem()\r\n\r\n      soma = (indice, novoValor) => {\r\n        //alert(\"indice: \" + indice + \"; novo valor: \" + novoValor);\r\n\r\n        this.setState( state => {\r\n          const itens = state.itens.map( (item, pos) => {\r\n            if(pos === indice){\r\n              alert(\"índice: \" + pos + \"; novo valor: \" + novoValor + \"; valor antigo: \" + item.preco);\r\n\r\n              /*this.setState({\r\n                total: (this.state.total - item.subtotal) + (novoValor * item.qtd)\r\n              })*/\r\n              total = (this.state.total - item.subTotal) + (item.qtd * novoValor);\r\n\r\n              item.subTotal = item.qtd * novoValor;\r\n              item.preco = novoValor;\r\n              return item;\r\n            } else {\r\n              return item;\r\n            }\r\n          });//fim da funçao map\r\n\r\n          return{\r\n            itens,\r\n          };\r\n\r\n        });//fim de setState\r\n      }//fim da funçao soma\r\n\r\n}//fim da classe (component) lista\r\n\r\nfunction Item (props) {\r\n\r\n    return <> {props.itens.map( (item, indice) => (\r\n            <div className=\"umItem\" key={item.id} >\r\n                <input type=\"checkbox\" name=\"riscar\" id=\"\"></input>\r\n                <input type=\"text\" value={item.produto} className=\"campo\" id=\"tfProd\"></input>\r\n                <label for=\"preco\"> R$ </label>\r\n                <input id=\"preco\" type=\"text\" className=\"campo\" id=\"tfPreco\" onChange={e =>{props.somaPreco(indice, +e.target.value)}}></input>\r\n                <label for=\"qtd\">   Qtd. </label>\r\n                <input id=\"qtd\" type=\"number\" value={item.qtd} min=\"1\" className=\"campo\" id=\"tfQtd\"></input>\r\n                <span> Subtotal R$ </span> {indice}\r\n           </div>\r\n           ))}\r\n          </>\r\n}\r\n\r\nReactDOM.render(\r\n    <Lista></Lista>,\r\n    document.getElementById('root')\r\n)"]},"metadata":{},"sourceType":"module"}