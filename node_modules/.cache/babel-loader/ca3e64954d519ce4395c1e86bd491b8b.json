{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fabio Mendes\\\\Documents\\\\lista-compras\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\n/*\r\nfunction Item (props) {\r\n    const [produto, setProduto] = useState(props.produto)\r\n    const [qtd, setQtd] = useState(props.qtd)\r\n    return <div className=\"umItem\">\r\n        <input type=\"checkbox\" name=\"riscar\" id=\"\"></input>\r\n        <input type=\"text\" value={produto} className=\"campo\" id=\"tfProd\" onChange={e => setProduto(e.target.value)}></input>\r\n        <label for=\"preco\"> R$ </label>\r\n        <input id=\"preco\" type=\"text\" className=\"campo\" id=\"tfPreco\" onChange={e =>{props.somaPreco(+e.target.value)}}></input>\r\n        <label for=\"qtd\">   Qtd. </label>\r\n        <input id=\"qtd\" type=\"number\" min=\"1\" value={qtd} className=\"campo\" id=\"tfQtd\" onChange={e => setQtd(e.target.value)}></input>\r\n        <span> Subtotal R$ </span>\r\n    </div>\r\n}\r\n\r\nclass Lista extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            total: 0.00\r\n        }\r\n    }\r\n    \r\n    soma = (novoValor, valorAntigo) => {\r\n        this.setState({\r\n            total: (this.state.total - valorAntigo) + novoValor\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"lista\">\r\n                <div className=\"divHeaderLista\">{\"Título da lista\"}\r\n                    <br/>\r\n                    Adicionar item <input type=\"text\" className=\"campoHeaderItem\"></input> Qtd. <input type=\"number\" min=\"1\" className=\"campoHeaderQtd\"></input> <button className=\"btnAdicionar\">Adicionar</button>\r\n                </div>\r\n                <div className=\"conteudo\">\r\n                    <Item produto=\"Pão de batata\"\r\n                        qtd=\"3\"\r\n                        somaPreco={this.soma}></Item>\r\n                    <Item produto=\"Sanduiche\"\r\n                        preco=\"5,42\"\r\n                        qtd=\"1\"\r\n                        somaPreco={this.soma}></Item>\r\n                </div>\r\n                <div>Total R$ {this.state.total}</div>\r\n            </div>\r\n        )\r\n    }\r\n}*/\n\nclass Lista extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.soma = (indice, novoValor) => {\n      //alert(\"indice: \" + indice + \"; novo valor: \" + novoValor);\n      this.setState(state => {\n        const itens = state.itens.map((item, pos) => {\n          if (pos === indice) {\n            //alert(\"índice: \" + pos + \"; novo valor: \" + novoValor + \"; valor antigo: \" + item.preco);\n            this.state.total = this.state.total - item.subTotal + item.qtd * novoValor;\n            item.subTotal = item.qtd * novoValor;\n            item.preco = novoValor;\n            return item;\n          } else {\n            return item;\n          }\n        }); //fim da funçao map\n\n        return {\n          itens\n        };\n      }); //fim de setState\n    };\n\n    this.modificaQtd = (indice, novoQtd) => {\n      this.setState(state => {\n        const itens = state.itens.map((item, pos) => {\n          if (pos === indice) {\n            this.state.total = this.state.total - item.subTotal + item.preco * novoQtd;\n            item.subTotal = item.preco * novoQtd;\n            item.qtd = novoQtd;\n            return item;\n          } else {\n            return item;\n          }\n        }); //fim de map\n\n        return {\n          itens\n        };\n      }); //fim do setState\n    };\n\n    this.deletaItem = (indice, produto, subtotal) => {\n      if (window.confirm(\"Deseja deletar o item \" + produto + \"?\")) {\n        this.setState(state => {\n          this.total = this.state.total - subtotal;\n          const itens = state.itens.filter((item, pos) => indice !== pos); //this.state.total = this.state.total - subtotal;\n\n          return {\n            itens\n          };\n        });\n      }\n    };\n\n    this.modificaProduto = (indice, novoNome) => {\n      this.setState(state => {\n        const itens = state.itens.map((item, pos) => {\n          if (pos === indice) {\n            item.produto = novoNome;\n            return item;\n          } else {\n            return item;\n          }\n        }); //fim de map\n\n        return {\n          itens\n        };\n      }); //fim do setState\n    };\n\n    this.state = {\n      itens: [],\n      produto: '',\n      qtd: 1,\n      total: 0.00\n    };\n    this.setProduto = this.setProduto.bind(this);\n    this.setQtd = this.setQtd.bind(this);\n    this.adicionarItem = this.adicionarItem.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lista\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"divHeaderLista\",\n        children: [\"Título da lista\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), \"Adicionar item \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"campoHeaderItem\",\n          onChange: this.setProduto,\n          value: this.state.produto\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 36\n        }, this), \" Qtd. \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"1\",\n          className: \"campoHeaderQtd\",\n          onChange: this.setQtd,\n          value: this.state.qtd\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 151\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btnAdicionar\",\n          onClick: this.adicionarItem,\n          children: \"Adicionar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 262\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"conteudo\",\n        children: /*#__PURE__*/_jsxDEV(Item, {\n          itens: this.state.itens,\n          somaPreco: this.soma,\n          modQtd: this.modificaQtd,\n          del: this.deletaItem,\n          modProd: this.modificaProduto\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Total R$ \", this.state.total]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this); //fim do return\n  } //fim do render\n\n\n  setProduto(e) {\n    this.setState({\n      produto: e.target.value\n    });\n  }\n\n  setQtd(e) {\n    this.setState({\n      qtd: e.target.value\n    });\n  }\n\n  adicionarItem(e) {\n    e.preventDefault();\n\n    if (this.state.produto.length === 0) {\n      return;\n    }\n\n    const newItem = {\n      produto: this.state.produto,\n      id: Date.now(),\n      qtd: this.state.qtd,\n      preco: 0.00,\n      subTotal: 0.00,\n      riscado: false\n    };\n    this.setState(state => ({\n      itens: state.itens.concat(newItem),\n      produto: '',\n      qtd: 1\n    }));\n  } //fim do método adicionarItem()\n\n\n} //fim da classe (component) lista\n\n\nfunction Item(props) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\" \", props.itens.map((item, indice) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"umItem\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        name: \"riscar\",\n        id: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        defaultValue: item.produto,\n        className: \"campo\",\n        id: \"tfProd\",\n        onChange: e => {\n          props.modProd(indice, e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"preco\",\n        children: \" R$ \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"preco\",\n        type: \"text\",\n        className: \"campo\",\n        id: \"tfPreco\",\n        onChange: e => {\n          props.somaPreco(indice, +e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"qtd\",\n        children: \"   Qtd. \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"qtd\",\n        type: \"number\",\n        value: item.qtd,\n        min: \"1\",\n        className: \"campo\",\n        id: \"tfQtd\",\n        onChange: e => {\n          props.modQtd(indice, +e.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \" Subtotal R$ \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }, this), \" \", item.subTotal, /*#__PURE__*/_jsxDEV(\"a\", {\n        onClick: e => {\n          props.del(indice, item.produto, item.subTotal);\n        },\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"remove.png\",\n          alt: \"Remover\",\n          height: \"20px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }, this)]\n    }, item.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }, this))]\n  }, void 0, true);\n}\n\n_c = Item;\nReactDOM.render( /*#__PURE__*/_jsxDEV(Lista, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 228,\n  columnNumber: 5\n}, this), document.getElementById('root'));\n\nvar _c;\n\n$RefreshReg$(_c, \"Item\");","map":{"version":3,"sources":["C:/Users/Fabio Mendes/Documents/lista-compras/src/index.js"],"names":["React","ReactDOM","Lista","Component","constructor","props","soma","indice","novoValor","setState","state","itens","map","item","pos","total","subTotal","qtd","preco","modificaQtd","novoQtd","deletaItem","produto","subtotal","window","confirm","filter","modificaProduto","novoNome","setProduto","bind","setQtd","adicionarItem","render","e","target","value","preventDefault","length","newItem","id","Date","now","riscado","concat","Item","modProd","somaPreco","modQtd","del","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style.css'\r\n\r\n/*\r\nfunction Item (props) {\r\n    const [produto, setProduto] = useState(props.produto)\r\n    const [qtd, setQtd] = useState(props.qtd)\r\n    return <div className=\"umItem\">\r\n        <input type=\"checkbox\" name=\"riscar\" id=\"\"></input>\r\n        <input type=\"text\" value={produto} className=\"campo\" id=\"tfProd\" onChange={e => setProduto(e.target.value)}></input>\r\n        <label for=\"preco\"> R$ </label>\r\n        <input id=\"preco\" type=\"text\" className=\"campo\" id=\"tfPreco\" onChange={e =>{props.somaPreco(+e.target.value)}}></input>\r\n        <label for=\"qtd\">   Qtd. </label>\r\n        <input id=\"qtd\" type=\"number\" min=\"1\" value={qtd} className=\"campo\" id=\"tfQtd\" onChange={e => setQtd(e.target.value)}></input>\r\n        <span> Subtotal R$ </span>\r\n    </div>\r\n}\r\n\r\nclass Lista extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            total: 0.00\r\n        }\r\n    }\r\n    \r\n    soma = (novoValor, valorAntigo) => {\r\n        this.setState({\r\n            total: (this.state.total - valorAntigo) + novoValor\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"lista\">\r\n                <div className=\"divHeaderLista\">{\"Título da lista\"}\r\n                    <br/>\r\n                    Adicionar item <input type=\"text\" className=\"campoHeaderItem\"></input> Qtd. <input type=\"number\" min=\"1\" className=\"campoHeaderQtd\"></input> <button className=\"btnAdicionar\">Adicionar</button>\r\n                </div>\r\n                <div className=\"conteudo\">\r\n                    <Item produto=\"Pão de batata\"\r\n                        qtd=\"3\"\r\n                        somaPreco={this.soma}></Item>\r\n                    <Item produto=\"Sanduiche\"\r\n                        preco=\"5,42\"\r\n                        qtd=\"1\"\r\n                        somaPreco={this.soma}></Item>\r\n                </div>\r\n                <div>Total R$ {this.state.total}</div>\r\n            </div>\r\n        )\r\n    }\r\n}*/\r\n\r\nclass Lista extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { itens: [], produto: '', qtd: 1, total: 0.00};\r\n        this.setProduto = this.setProduto.bind(this);\r\n        this.setQtd =this.setQtd.bind(this);\r\n        this.adicionarItem = this.adicionarItem.bind(this);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"lista\">\r\n                <div className=\"divHeaderLista\">{\"Título da lista\"}\r\n                    <br/>\r\n                    Adicionar item <input type=\"text\" className=\"campoHeaderItem\" onChange={this.setProduto} value={this.state.produto}></input> Qtd. <input type=\"number\" min=\"1\" className=\"campoHeaderQtd\" onChange={this.setQtd} value={this.state.qtd}></input> <button className=\"btnAdicionar\" onClick={this.adicionarItem}>Adicionar</button>\r\n                </div>\r\n                <div className=\"conteudo\">\r\n                    <Item itens={this.state.itens} somaPreco={this.soma} modQtd={this.modificaQtd} del={this.deletaItem} modProd={this.modificaProduto}/>\r\n                </div>\r\n                <div>Total R$ {this.state.total}</div>\r\n            \r\n\r\n          {/*<div>\r\n            <h3>Tarefas</h3>\r\n            <TodoList items={this.state.items} />\r\n            <form onSubmit={this.handleSubmit}>\r\n              <label htmlFor=\"new-todo\">\r\n                O que precisa ser feito?\r\n              </label>\r\n              <input\r\n                id=\"new-todo\"\r\n                onChange={this.handleChange}\r\n                value={this.state.text}\r\n              />\r\n              <button>\r\n                Adicionar #{this.state.items.length + 1}\r\n              </button>\r\n            </form>\r\n          </div>*/}\r\n\r\n            </div>\r\n        );//fim do return\r\n      }//fim do render\r\n\r\n      setProduto(e) {\r\n        this.setState({ produto: e.target.value });\r\n      }\r\n\r\n      setQtd(e){\r\n        this.setState({ qtd: e.target.value });\r\n      }\r\n\r\n      adicionarItem(e) {\r\n        e.preventDefault();\r\n        if (this.state.produto.length === 0) {\r\n          return;\r\n        }\r\n        const newItem = {\r\n          produto: this.state.produto,\r\n          id: Date.now(),\r\n          qtd: this.state.qtd,\r\n          preco: 0.00,\r\n          subTotal: 0.00,\r\n          riscado: false\r\n        };\r\n        this.setState(state => ({\r\n          itens: state.itens.concat(newItem),\r\n          produto: '',\r\n          qtd: 1\r\n        }));\r\n      }//fim do método adicionarItem()\r\n\r\n      soma = (indice, novoValor) => {\r\n        //alert(\"indice: \" + indice + \"; novo valor: \" + novoValor);\r\n\r\n        this.setState( state => {\r\n          const itens = state.itens.map( (item, pos) => {\r\n            if(pos === indice){\r\n              //alert(\"índice: \" + pos + \"; novo valor: \" + novoValor + \"; valor antigo: \" + item.preco);\r\n\r\n              \r\n              this.state.total = (this.state.total - item.subTotal) + (item.qtd * novoValor);\r\n\r\n              item.subTotal = item.qtd * novoValor;\r\n              item.preco = novoValor;\r\n              return item;\r\n            } else {\r\n              return item;\r\n            }\r\n          });//fim da funçao map\r\n\r\n          return{\r\n            itens,\r\n          };\r\n\r\n        });//fim de setState\r\n\r\n      }//fim da funçao soma\r\n\r\n      modificaQtd = (indice, novoQtd) => {\r\n        this.setState( state => {\r\n          const itens = state.itens.map( (item, pos) => {\r\n            if(pos === indice){\r\n              this.state.total = (this.state.total - item.subTotal) + (item.preco * novoQtd);\r\n              item.subTotal = item.preco * novoQtd;\r\n              item.qtd = novoQtd;\r\n              return item;\r\n            } else {\r\n              return item;\r\n            }\r\n          });//fim de map\r\n\r\n          return{\r\n            itens,\r\n          };\r\n        });//fim do setState\r\n      }\r\n\r\n      deletaItem = (indice, produto, subtotal) => {\r\n        \r\n        if( window.confirm(\"Deseja deletar o item \" + produto + \"?\") ) {\r\n          this.setState(state => {\r\n            this.total = this.state.total - subtotal;\r\n            const itens = state.itens.filter((item, pos) => indice !== pos);\r\n            //this.state.total = this.state.total - subtotal;\r\n            return {\r\n              itens,\r\n            };\r\n          });\r\n        }\r\n      };\r\n\r\n      modificaProduto = (indice, novoNome) => {\r\n        this.setState( state => {\r\n          const itens = state.itens.map( (item, pos) => {\r\n            if(pos === indice){\r\n              item.produto = novoNome;\r\n              return item;\r\n            } else {\r\n              return item;\r\n            }\r\n          });//fim de map\r\n\r\n          return{\r\n            itens,\r\n          };\r\n        });//fim do setState\r\n      }\r\n\r\n}//fim da classe (component) lista\r\n\r\nfunction Item (props) {\r\n\r\n    return <> {props.itens.map( (item, indice) => (\r\n            <div className=\"umItem\" key={item.id} >\r\n                <input type=\"checkbox\" name=\"riscar\" id=\"\"></input>\r\n                <input type=\"text\" defaultValue={item.produto} className=\"campo\" id=\"tfProd\" onChange={e => {props.modProd(indice, e.target.value)} }></input>\r\n                <label htmlFor=\"preco\"> R$ </label>\r\n                <input id=\"preco\" type=\"text\" className=\"campo\" id=\"tfPreco\" onChange={e =>{props.somaPreco(indice, +e.target.value)}}></input>\r\n                <label htmlFor=\"qtd\">   Qtd. </label>\r\n                <input id=\"qtd\" type=\"number\" value={item.qtd} min=\"1\" className=\"campo\" id=\"tfQtd\" onChange={e =>{props.modQtd(indice, +e.target.value)}}></input>\r\n                <span> Subtotal R$ </span> {item.subTotal}\r\n                <a onClick={e => {props.del(indice, item.produto, item.subTotal)} }>\r\n                  <img src={\"remove.png\"} alt={\"Remover\"} height={\"20px\"}/>\r\n                </a>\r\n           </div>\r\n           ))}\r\n          </>\r\n}\r\n\r\nReactDOM.render(\r\n    <Lista></Lista>,\r\n    document.getElementById('root')\r\n)"]},"metadata":{},"sourceType":"module"}